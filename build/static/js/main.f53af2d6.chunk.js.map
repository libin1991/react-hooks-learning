{"version":3,"sources":["app2/index.js","index.js"],"names":["Counter","state","count","countUp","_this","setState","countDown","_this2","this","setTimeout","console","log","_react_16_12_0_react_default","a","createElement","onClick","Component","Counter2","_useState","useState","_useState2","Object","slicedToArray","setCount","useEffect","Counter3","_useState3","_useState4","ref","React","useRef","current","app2","Fragment","app2_Counter","Main","ReactDOM","render","src_Main","document","getElementById"],"mappings":"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","file":"static/js/main.f53af2d6.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    count: 0\r\n  }\r\n\r\n  countUp = () => {\r\n    const { count } = this.state;\r\n    this.setState({ count: count + 1 });\r\n  }\r\n\r\n  countDown = () => {\r\n    const { count } = this.state;\r\n    this.setState({ count: count - 1 });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    setTimeout(() => {\r\n      console.log(this.state.count);\r\n    }, 2000)\r\n  }\r\n\r\n  render() {\r\n    const { count } = this.state;\r\n    return (\r\n      <div>\r\n        <h4>class Component:</h4>\r\n        <button onClick={this.countUp}>+</button>\r\n        <h1>{count}</h1>\r\n        <button onClick={this.countDown}>-</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction Counter2() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  //当数组中值是状态的时候，就会只监听这一个状态的变化。当然数组中可以多个值，监听存放state的变化。 \r\n  //数组为空的时候，useEffect就相当于componentDidMoubt和componentWillUnmount这两个生命周期，只在首次渲染和卸载的时候执行。\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      console.log(count)\r\n    }, 2000);\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <h4>useEffect:</h4>\r\n      <button onClick={() => setCount(count + 1)}>+</button>\r\n      <h1>{count}</h1>\r\n      <button onClick={() => setCount(count - 1)}>-</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n//当然如果你只想拿到最新的 count 的话，你可以使用 useRef 来实现\r\nfunction Counter3() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const ref = React.useRef(count);\r\n\r\n  useEffect(() => {\r\n    ref.current = count;\r\n    setTimeout(() => {\r\n      console.log(ref.current);\r\n    }, 2000);\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <h4>useRef:</h4>\r\n      <button onClick={() => setCount(count + 1)}>+</button>\r\n      <h1>{count}</h1>\r\n      <button onClick={() => setCount(count - 1)}>-</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default function () {\r\n  return (\r\n    <>\r\n      <Counter />\r\n      <br /><br /><br /><br /><br />\r\n      <span>快速点击看控制台</span>\r\n      <Counter2 />\r\n      <br /><br /><br /><br /><br />\r\n      <Counter3 />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app2';\r\n\r\n\r\nclass Main extends React.Component {\r\n    state = {\r\n        count: 0\r\n    }\r\n\r\n    countUp = () => {\r\n        const { count } = this.state;\r\n        this.setState({ count: count + 1 });\r\n    }\r\n\r\n    countDown = () => {\r\n        const { count } = this.state;\r\n        this.setState({ count: count - 1 });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        setTimeout(() => {\r\n            console.log(this.state.count);\r\n        }, 2000)\r\n    }\r\n\r\n    render() {\r\n        const { count } = this.state;\r\n        return (\r\n            <div>\r\n                <h4>我的测试</h4>\r\n                <App></App>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<Main />, document.getElementById('root'));\r\n"],"sourceRoot":""}